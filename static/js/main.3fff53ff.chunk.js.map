{"version":3,"sources":["components/Header.js","components/TodoItem/TodoItem.js","components/InputTodo.js","components/ToDoContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","h1Style","textAlign","margin","marginBottom","TodoItem","props","className","type","checked","completed","onChange","handleChange","id","titel","onClick","deleteTodoHandler","InputTodo","state","title","correctLength","onChangeHandler","e","setState","target","value","onSubmitHandler","preventDefault","length","addTodoItem","action","onSubmit","this","placeholder","Component","TodoContainer","onChangeCheckbox","updatedTodosArr","todos","map","todo","filter","addTodo","submitTodo","currentTodo","Date","now","todoState","push","console","log","newTodo","uuidv4","updatedTodoArr","unshift","key","htmlFor","React","App","background","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3fff53ff.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  const h1Style = {\n    textAlign: \"center\",\n    margin: \"30px\",\n  };\n\n  return (\n    <header>\n      <h1 style={{ h1Style }}>To Do App</h1>\n      <p style={{ marginBottom: \"15px\" }}>Add, Edit or Delete a Todo Item</p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./TodoItem.scss\";\n\nconst TodoItem = (props) => {\n  const completedStyle = {\n      fontStyle: \"italic\",\n      color: \"#d35e0f\",\n      opacity: 0.4,\n      textDecoration: \"line-through\",\n  };\n\n  return (\n    <li className=\"todo-item\">\n      <input\n        type=\"checkbox\"\n        checked={props.completed}\n        onChange={() => props.handleChange(props.id)}\n      ></input>\n\n      {/* <span style={props.completed ? completedStyle : null}>{props.titel}</span> */}\n      {/* Alternativ zu inline style css klasse verwenden*/}\n      <span className={props.completed ? \"completed-item\" : null}>{props.titel}</span>\n\n      <button\n        onClick={() => {\n          props.deleteTodoHandler(props.id);\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default TodoItem;\n\n// class TodoItem extends React.Component {\n//     render(){\n//     return <li>{this.props.titel}</li>\n//     }\n// }\n// export default TodoItem\n","import React, { Component } from \"react\";\n\nclass InputTodo extends Component {\n\n    state = {\n        title: \"\",\n        correctLength: true\n    };\n\n    onChangeHandler = (e) => {\n        //console.log('Input change', e.target);\n        this.setState({\n            title: e.target.value  //toUpperCase albo (+ \" |\"\n        })\n}\n\n    onSubmitHandler = (e) => {\n        e.preventDefault();\n        //console.log(this.state.title);\n        // correct length\n        if(this.state.title.length > 3 && this.state.title.length < 25 ) {\n\n            this.props.addTodoItem(this.state.title);\n\n                // clear title the\n            this.setState({\n                title: \"\",\n                correctLength: true\n            });\n\n        } else{ // incorrect length\n            this.setState({\n                title: \"\",\n                correctLength: false\n            });\n        }\n    }\n\n    render() {\n\n        return (\n            <form action=\"\" onSubmit={this.onSubmitHandler} className=\"form\">\n                <input \n                className=\"input-text\"\n                type=\"text\" \n                placeholder=\"Todo...\" \n                value={ this.state.title } \n                onChange={ this.onChangeHandler }\n                \n                />\n                <input type=\"submit\" value=\"hinzufügen\" className=\"input-submit\"/>\n                {this.state.correctLength ? \n                    null  : \n                    <p>Dein todo muss 3 und 25 zeichen lang sein!</p>\n                }\n\n            </form>\n        );\n    }\n}\n\nexport default InputTodo;","import React from \"react\";\nimport Header from \"./Header\";\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport InputTodo from \"./InputTodo\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\n// class component\nclass TodoContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: \"\",\n      title: \"\",\n      completed: false,\n\n      todos: [\n        {\n          id: uuidv4(),\n          title: \"react lernen\",\n          completed: false,\n        },\n        {\n          id: uuidv4(),\n          title: \"javaScript auffrischen(Klassen, usw.)\",\n          completed: false,\n        },\n        {\n          id: uuidv4(),\n          title: \"ajajajaj(Klassen, usw.)\",\n          completed: false,\n        },\n        {\n          id: uuidv4(),\n          title: \"Hallo world\",\n          completed: false,\n        },\n        {\n          id: uuidv4(),\n          title: '\"Hallo apollo 18\"',\n          completed: false,\n        },\n      ],\n    };\n  }\n\n  onChangeCheckbox = (id) => {\n    const updatedTodosArr = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    // console.log(updatedTodosArr);\n    this.setState({\n      todos: updatedTodosArr,\n    });\n  };\n\n  deleteTodoHandler = (id) => {\n    //console.log(\"delete item:\", id);\n\n    const updatedTodosArr = this.state.todos.filter((todo) => todo.id !== id);\n    //console.log(updatedTodosArr); // ziel: array ohne das gelöschte Element\n    // update state\n    this.setState({\n      todos: updatedTodosArr,\n    });\n  };\n\n\n\n\n  addTodo = (e) => {\n    // console.log(e.target.value);\n    // console.log(\"hallo e\");\n    this.setState({ title: e.target.value });\n    \n  };\n\n  submitTodo = (e) => {\n    // console.log(e);\n    // console.log(\"gaelus e\");\n    e.preventDefault();\n    const currentTodo = {\n      id: `1 ${Date.now()}`,\n      title: this.state.title,\n      completed: false,\n    };\n    const todoState = this.state.todos;\n    todoState.push(currentTodo)\n    this.setState({\n      id: \"\",\n      title: \"\",\n      todos: todoState,\n    })\n  };\n\n  addTodoItem = (title) => {\n    console.log('add:', title);\n    // füge neuses toDo Item dem state hinzu\n    // drei Werte: id, title, completed\n    const newTodo = {\n      id: uuidv4(),\n      title: title,\n      completed: false,\n    }\n    // copy array from state updateTodosArr\n    const updatedTodoArr = [...this.state.todos];\n    // add new todo Item to updatedTodosArr\n    updatedTodoArr.unshift(newTodo)\n\n    // update state with updatedTodosArr\n     this.setState({\n       todos: updatedTodoArr\n     });\n    \n    console.log(updatedTodoArr);\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <InputTodo addTodoItem = {this.addTodoItem}/>\n        <ul>\n          {this.state.todos.map((todo) => (\n            <TodoItem\n              key={todo.id}\n              id={todo.id}\n              titel={todo.title}\n              completed={todo.completed}\n              handleChange={this.onChangeCheckbox}\n              deleteTodoHandler={this.deleteTodoHandler}\n            />\n          ))}\n        </ul>\n\n        <form action=\"#\">\n          <label htmlFor=\"#\">Add Todo</label>\n          <input type=\"text\" value={this.state.title} onChange={this.addTodo} />\n          <button onClick={this.submitTodo}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\n// functional component\n// const TodoContainerFunction = () => {\n//     return (\n//         <div>\n//             <h1>Hi, ich bin der TodoContainer!</h1>\n//             <p>Icke bin eine React Component</p>\n//         </div>);\n// };\nexport default TodoContainer;\n","import React from \"react\";\nimport TodoContainer from \"./components/ToDoContainer\";\nimport \"./App.scss\";\n\nfunction App() {\n\n     return (\n       <div className=\"App\">\n        <p style={{textAlign:\"center\", marginBottom: \"20px\", background:\"red\"}}>\n          Hier kommt unsere ToDo hin (this text is from App.js). \n          </p>\n        <TodoContainer text=\"Mein text kommt als property\"/>\n        \n       </div>\n       );\n     }\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}